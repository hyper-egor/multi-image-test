plugins {
    id 'org.springframework.boot' version '2.6.6'

    // to pack the image using 'docker'
    id "com.palantir.docker" version "0.32.0"

    // to run the image using 'dockerRun'
    id "com.palantir.docker-run" version "0.32.0"
}

docker {
    dependsOn build
    name "${project.name}:${project.version}"
    files bootJar.archivePath
    buildArgs([JAR_FILE: "${bootJar.archiveName}"])
}

// also 'gradle dockerStop' task is available
dockerRun {
    name "${project.name}"
    image "${project.name}:${project.version}"
    // port <port available outside> : <port of app in the container>
    ports '81:8081'
    // 'true' to remove container after stop
    clean true
}


ext {
    // Define here the vars to use globally in placeholders of this script
    dockerless_environment_host = 'localhost'
}

test {
    jvmArgs = [
            "-Dconfig_server_host=${dockerless_environment_host}",  // config server host to work without Docker (build, junit tests etc.)
            "-Dsolace_host=${dockerless_environment_host}"          // SOLACE host to work without Docker (build, junit tests etc.)
    ]
}

dependencies {
    // below declares that this 'module'a' depends on 'configuration' module
    implementation project(':common')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-test'

    implementation group: 'com.solace.spring.boot', name: 'solace-jms-spring-boot-starter', version: '4.2.2'

    // enable Spring cloud config as config source
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-config-client', version: '3.1.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

